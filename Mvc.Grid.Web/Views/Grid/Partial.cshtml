@model IEnumerable<PersonModel>

@{
    ViewBag.Title = "MVC.Grid custom partial";
}

<div class="example content-block">
    <div class="widget">
        <div class="widget-header">
            <h1>
                <i class="fa fa-bars"></i>
                Using custom grid partial
                <span class="widget-buttons">
                    <i class="content-toggle"></i>
                </span>
            </h1>
        </div>
        <div class="widget-content">
            @(Html
                .Grid("_NestedPersonGrid", Model)
                .Build(columns =>
                {
                    columns.Add(model => model.Name).Titled("Name");
                    columns.Add(model => model.Surname).Titled("Surname");

                    columns.Add(model => model.Age).Titled("Age");
                    columns.Add(model => model.Birthday).Titled("Birth date");
                    columns.Add(model => model.IsWorking).Titled("Employed");
                })
                .Filterable()
                .Sortable()
            )
        </div>
    </div>
</div>

<div class="row">
    <div class="col-md-6">
        <div class="example-code content-block">
            <div class="widget">
                <div class="widget-header">
                    <i class="fa fa-code"></i>
                    Controller
                    <span class="widget-buttons">
                        <i class="content-toggle"></i>
                    </span>
                </div>
                <div class="widget-content">
<pre>
<code>
[<span class="cls">HttpGet</span>]
<span class="kwd">public</span> <span class="cls">ActionResult</span> Index()
{
    <span class="kwd">return</span> View(<span class="cls">PeopleRepository</span>.GetPeople());
}
</code>
</pre>
                </div>
            </div>
        </div>
    </div>
    <div class="col-md-6">
        <div class="example-code content-block">
            <div class="widget">
                <div class="widget-header">
                    <i class="fa fa-code"></i>
                    View
                    <span class="widget-buttons">
                        <i class="content-toggle"></i>
                    </span>
                </div>
                <div class="widget-content">
<pre>
<code>
@@model <span class="cls">IEnumerable</span>&lt;<span class="cls">PersonModel</span>&gt;

@@(Html
    .Grid(<span class="str">"_NestedPersonGrid"</span>, Model)
    .Build(columns =>
    {
        columns.Add(model => model.Name).Titled(<span class="str">"Name"</span>);
        columns.Add(model => model.Surname).Titled(<span class="str">"Surname"</span>);

        columns.Add(model => model.Age).Titled(<span class="str">"Age"</span>);
        columns.Add(model => model.Birthday).Titled(<span class="str">"Birth date"</span>);
        columns.Add(model => model.IsWorking).Titled(<span class="str">"Employed"</span>);
    })
    .Filterable()
    .Sortable()
)
</code>
</pre>
                </div>
            </div>
        </div>
    </div>
    <div class="col-md-12">
        <div class="example-code content-block">
            <div class="widget">
                <div class="widget-header">
                    <i class="fa fa-code"></i>
                    _NestedPersonGrid
                    <span class="widget-buttons">
                        <i class="content-toggle"></i>
                    </span>
                </div>
                <div class="widget-content">
<pre>
<code>
@@model IGrid&lt;PersonModel&gt;

&lt;div id="@@Model.Name" class="mvc-grid"&gt;
    &lt;table class="table @@Model.CssClasses"&gt;
        &lt;thead&gt;
            &lt;tr&gt;
                @@foreach (IGridColumn column in Model.Columns)
                {
                    String filterableClass = column.IsFilterable == true ? "filterable" : null;
                    String sortableClass = column.IsSortable == true ? "sortable" : null;

                    &lt;th class="@@filterableClass @@sortableClass @@column.CssClasses"
                        data-name="@@column.Name"
                        data-filter="@@column.IsFilterable"
                        data-filter-name="@@column.FilterName"
                        data-filter-multi="@@column.IsMultiFilterable"
                        data-filter-first-type="@@(column.Filter != null && column.Filter.First != null
                            ? column.Filter.First.Type : "")"
                        data-filter-first-val="@@(column.Filter != null && column.Filter.First != null
                            ? column.Filter.First.Value : "")"
                        data-filter-operator="@@(column.Filter != null ? column.Filter.Operator : "")"
                        data-filter-second-type="@@(column.Filter != null && column.Filter.Second != null
                            ? column.Filter.Second.Type : "")"
                        data-filter-second-val="@@(column.Filter != null && column.Filter.Second != null
                            ? column.Filter.Second.Value : "")"
                        data-sort="@@column.IsSortable"
                        data-sort-order="@@column.SortOrder"
                        data-sort-first="@@column.FirstSortOrder"&gt;
                        &lt;span class="mvc-grid-header-title"&gt;@@column.Title&lt;/span&gt;
                        @@if (column.IsSortable == true)
                        {
                            &lt;span class="mvc-grid-sort @@column.SortOrder.ToString().ToLower()"&gt;&lt;/span&gt;
                        }
                        @@if (column.IsFilterable == true)
                        {
                            String filterApplied = column.Filter != null && (column.Filter.First != null || column.Filter.Second != null) ? "applied" : "";
                            &lt;span class="mvc-grid-filter @@filterApplied"&gt;&lt;/span&gt;
                        }
                    &lt;/th&gt;
                }
            &lt;/tr&gt;
        &lt;/thead&gt;
        &lt;tbody&gt;
            @@if (Model.Rows.Count() &gt; 0)
            {
                foreach (IGridRow&lt;PersonModel&gt; row in Model.Rows)
                {
                    &lt;tr class="@@row.CssClasses"&gt;
                        @@foreach (IGridColumn column in Model.Columns)
                        {
                            &lt;td class="@@column.CssClasses"&gt;@@column.ValueFor(row)&lt;/td&gt;
                        }
                    &lt;/tr&gt;

                    if (row.Model.Children.Any())
                    {
                        &lt;tr&gt;
                            &lt;td colspan="@@Model.Columns.Count()">
                                @@(Html
                                    .Grid(row.Model.Children)
                                    .Build(columns =>
                                    {
                                        columns.Add(model => model.Name).Titled("Child name");
                                        columns.Add(model => model.Age).Titled("Age");
                                        columns.Add(model => model.Birthday).Titled("Birth date");
                                    })
                                )
                            &lt;/td&gt;
                        &lt;/tr&gt;
                    }
                }
            }
            else
            {
                &lt;tr&gt;
                    &lt;td class="mvc-grid-empty" colspan="@@Model.Columns.Count()"&gt;
                        @@Model.EmptyText
                    &lt;/td&gt;
                &lt;/tr&gt;
            }
        &lt;/tbody&gt;
    &lt;/table&gt;
    @@if (Model.Pager != null)
    {
        @@Html.Partial(Model.Pager.PartialViewName, Model.Pager)
    }
&lt;/div&gt;
</code>
</pre>
                </div>
            </div>
        </div>
    </div>
</div>